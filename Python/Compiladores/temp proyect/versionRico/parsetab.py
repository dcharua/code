
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CLOSEBRACK CLOSEBRACKSQ CLOSEPAR COMMA COMMENT DIFFERENT DIVIDE ELSE ENDFILE EQUALS ID IF INT LESS LESSOREQUAL MINUS MORE MOREOREQUAL MULTIPLY NUM OPENBRACK OPENBRACKSQ OPENPAR PLUS RETURN SEMICOLON SPACE VOID WHILEprogram : declaration_list ENDFILEdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : fun_declarationdeclaration : var_declarationvar_declaration : type_specifier ID SEMICOLONvar_declaration : type_specifier OPENBRACKSQ ID NUM CLOSEBRACKSQ SEMICOLONtype_specifier : INT\n                      | VOIDfun_declaration : type_specifier ID OPENPAR params CLOSEPAR compound_stmtparams : param_list\n              | VOIDparam_list : param_list COMMA paramparam_list : paramparam : type_specifier IDparam : type_specifier ID OPENBRACKSQ CLOSEBRACKSQcompound_stmt : OPENBRACK local_declarations statement_list CLOSEBRACKlocal_declarations : local_declarations var_declarationlocal_declarations : emptystatement_list : statement_list statementstatement_list : emptystatement : expression_stmt\n                 | compound_stmt\n                 | selection_stmt\n                 | iteration_stmt\n                 | return_stmtexpression_stmt : expression SEMICOLON\n                       | SEMICOLONselection_stmt : IF OPENPAR expression CLOSEPAR statementselection_stmt : IF OPENPAR expression CLOSEPAR statement ELSE statementiteration_stmt : WHILE OPENPAR expression CLOSEPAR statementreturn_stmt : RETURN SEMICOLONreturn_stmt : RETURN expression SEMICOLONexpression : var ASSIGN expressionexpression : simple_expressionvar : IDvar : ID OPENBRACKSQ expression CLOSEBRACKSQsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESSOREQUAL\n             | LESS\n             | MORE\n             | MOREOREQUAL\n             | EQUALS\n             | DIFFERENTadditive_expression : additive_expression addop termadditive_expression : termaddop : PLUS\n             | MINUSterm : term mulop factorterm : factormulop : MULTIPLY\n             | DIVIDEfactor : OPENPAR expression CLOSEPARfactor : varfactor : callfactor : NUMcall : ID OPENPAR args CLOSEPARargs : arg_listargs : emptyarg_list : arg_list COMMA expressionarg_list : expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,13,14,24,27,28,30,32,33,35,38,],[7,7,-3,-4,-5,-2,7,-6,7,-10,-63,-7,7,-19,-18,-17,]),'VOID':([0,2,3,4,5,10,13,14,24,27,28,30,32,33,35,38,],[8,8,-3,-4,-5,-2,19,-6,8,-10,-63,-7,8,-19,-18,-17,]),'$end':([1,9,],[0,-1,]),'ENDFILE':([2,3,4,5,10,14,27,30,38,],[9,-3,-4,-5,-2,-6,-10,-7,-17,]),'ID':([6,7,8,12,14,16,19,28,30,32,33,34,35,36,37,38,39,40,41,42,43,44,46,48,50,60,61,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,96,97,100,101,102,104,105,],[11,-8,-9,15,-6,22,-9,-63,-7,-63,-19,53,-18,-21,59,-17,-20,-22,-23,-24,-25,-26,-28,53,53,-27,53,53,-32,53,53,53,53,53,-40,-41,-42,-43,-44,-45,-48,-49,53,-52,-53,-33,53,53,53,-29,-31,53,-30,]),'OPENBRACKSQ':([6,7,8,22,37,53,],[12,-8,-9,26,12,67,]),'OPENPAR':([11,14,28,30,32,33,34,35,36,38,39,40,41,42,43,44,46,47,48,49,50,53,60,61,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,96,97,100,101,102,104,105,],[13,-6,-63,-7,-63,-19,48,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,61,48,63,48,68,-27,48,48,-32,48,48,48,48,48,-40,-41,-42,-43,-44,-45,-48,-49,48,-52,-53,-33,48,48,48,-29,-31,48,-30,]),'SEMICOLON':([11,14,25,28,30,32,33,34,35,36,38,39,40,41,42,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,64,65,83,85,86,92,93,94,95,96,97,98,99,101,102,104,105,],[14,-6,30,-63,-7,-63,-19,46,-18,-21,-17,-20,-22,-23,-24,-25,-26,60,-28,64,-55,-35,-36,-39,-47,-51,-56,-57,14,-27,-32,85,-54,-33,-34,-38,-55,-46,-50,46,46,-37,-58,-29,-31,46,-30,]),'CLOSEBRACK':([14,28,30,32,33,34,35,36,38,39,40,41,42,43,44,46,60,64,85,101,102,105,],[-6,-63,-7,-63,-19,38,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,-29,-31,-30,]),'OPENBRACK':([14,23,28,30,32,33,34,35,36,38,39,40,41,42,43,44,46,60,64,85,96,97,101,102,104,105,],[-6,28,-63,-7,-63,-19,28,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,28,28,-29,-31,28,-30,]),'IF':([14,28,30,32,33,34,35,36,38,39,40,41,42,43,44,46,60,64,85,96,97,101,102,104,105,],[-6,-63,-7,-63,-19,47,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,47,47,-29,-31,47,-30,]),'WHILE':([14,28,30,32,33,34,35,36,38,39,40,41,42,43,44,46,60,64,85,96,97,101,102,104,105,],[-6,-63,-7,-63,-19,49,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,49,49,-29,-31,49,-30,]),'RETURN':([14,28,30,32,33,34,35,36,38,39,40,41,42,43,44,46,60,64,85,96,97,101,102,104,105,],[-6,-63,-7,-63,-19,50,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,50,50,-29,-31,50,-30,]),'NUM':([14,15,28,30,32,33,34,35,36,38,39,40,41,42,43,44,46,48,50,60,61,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,96,97,100,101,102,104,105,],[-6,21,-63,-7,-63,-19,58,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,58,58,-27,58,58,-32,58,58,58,58,58,-40,-41,-42,-43,-44,-45,-48,-49,58,-52,-53,-33,58,58,58,-29,-31,58,-30,]),'CLOSEPAR':([17,18,19,20,22,29,31,51,52,53,54,55,56,57,58,62,68,82,83,84,86,88,89,90,91,92,93,94,95,98,99,103,],[23,-11,-12,-14,-15,-13,-16,-55,-35,-36,-39,-47,-51,-56,-57,83,-63,96,-54,97,-34,99,-59,-60,-62,-38,-55,-46,-50,-37,-58,-61,]),'COMMA':([18,20,22,29,31,51,52,53,54,55,56,57,58,83,86,89,91,92,93,94,95,98,99,103,],[24,-14,-15,-13,-16,-55,-35,-36,-39,-47,-51,-56,-57,-54,-34,100,-62,-38,-55,-46,-50,-37,-58,-61,]),'CLOSEBRACKSQ':([21,26,51,52,53,54,55,56,57,58,83,86,87,92,93,94,95,98,99,],[25,31,-55,-35,-36,-39,-47,-51,-56,-57,-54,-34,98,-38,-55,-46,-50,-37,-58,]),'ELSE':([38,40,41,42,43,44,46,60,64,85,101,102,105,],[-17,-22,-23,-24,-25,-26,-28,-27,-32,-33,104,-31,-30,]),'ASSIGN':([51,53,98,],[66,-36,-37,]),'MULTIPLY':([51,53,55,56,57,58,83,93,94,95,98,99,],[-55,-36,80,-51,-56,-57,-54,-55,80,-50,-37,-58,]),'DIVIDE':([51,53,55,56,57,58,83,93,94,95,98,99,],[-55,-36,81,-51,-56,-57,-54,-55,81,-50,-37,-58,]),'LESSOREQUAL':([51,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,71,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'LESS':([51,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,72,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'MORE':([51,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,73,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'MOREOREQUAL':([51,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,74,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'EQUALS':([51,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,75,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'DIFFERENT':([51,53,54,55,56,57,58,83,93,94,95,98,99,],[-55,-36,76,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'PLUS':([51,53,54,55,56,57,58,83,92,93,94,95,98,99,],[-55,-36,77,-47,-51,-56,-57,-54,77,-55,-46,-50,-37,-58,]),'MINUS':([51,53,54,55,56,57,58,83,92,93,94,95,98,99,],[-55,-36,78,-47,-51,-56,-57,-54,78,-55,-46,-50,-37,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'fun_declaration':([0,2,],[4,4,]),'var_declaration':([0,2,32,],[5,5,35,]),'type_specifier':([0,2,13,24,32,],[6,6,16,16,37,]),'params':([13,],[17,]),'param_list':([13,],[18,]),'param':([13,24,],[20,29,]),'compound_stmt':([23,34,96,97,104,],[27,41,41,41,41,]),'local_declarations':([28,],[32,]),'empty':([28,32,68,],[33,36,90,]),'statement_list':([32,],[34,]),'statement':([34,96,97,104,],[39,101,102,105,]),'expression_stmt':([34,96,97,104,],[40,40,40,40,]),'selection_stmt':([34,96,97,104,],[42,42,42,42,]),'iteration_stmt':([34,96,97,104,],[43,43,43,43,]),'return_stmt':([34,96,97,104,],[44,44,44,44,]),'expression':([34,48,50,61,63,66,67,68,96,97,100,104,],[45,62,65,82,84,86,87,91,45,45,103,45,]),'var':([34,48,50,61,63,66,67,68,69,70,79,96,97,100,104,],[51,51,51,51,51,51,51,51,93,93,93,51,51,51,51,]),'simple_expression':([34,48,50,61,63,66,67,68,96,97,100,104,],[52,52,52,52,52,52,52,52,52,52,52,52,]),'additive_expression':([34,48,50,61,63,66,67,68,69,96,97,100,104,],[54,54,54,54,54,54,54,54,92,54,54,54,54,]),'term':([34,48,50,61,63,66,67,68,69,70,96,97,100,104,],[55,55,55,55,55,55,55,55,55,94,55,55,55,55,]),'factor':([34,48,50,61,63,66,67,68,69,70,79,96,97,100,104,],[56,56,56,56,56,56,56,56,56,56,95,56,56,56,56,]),'call':([34,48,50,61,63,66,67,68,69,70,79,96,97,100,104,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'relop':([54,],[69,]),'addop':([54,92,],[70,70,]),'mulop':([55,94,],[79,79,]),'args':([68,],[88,]),'arg_list':([68,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list ENDFILE','program',2,'p_program','Parser1.py',23),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_a','Parser1.py',29),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_b','Parser1.py',42),
  ('declaration -> fun_declaration','declaration',1,'p_declaration_a','Parser1.py',47),
  ('declaration -> var_declaration','declaration',1,'p_declaration_b','Parser1.py',52),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration_a','Parser1.py',57),
  ('var_declaration -> type_specifier OPENBRACKSQ ID NUM CLOSEBRACKSQ SEMICOLON','var_declaration',6,'p_var_declaration_b','Parser1.py',62),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','Parser1.py',67),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','Parser1.py',68),
  ('fun_declaration -> type_specifier ID OPENPAR params CLOSEPAR compound_stmt','fun_declaration',6,'p_fun_declaration','Parser1.py',73),
  ('params -> param_list','params',1,'p_params','Parser1.py',78),
  ('params -> VOID','params',1,'p_params','Parser1.py',79),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_a','Parser1.py',84),
  ('param_list -> param','param_list',1,'p_param_list_b','Parser1.py',97),
  ('param -> type_specifier ID','param',2,'p_param_a','Parser1.py',102),
  ('param -> type_specifier ID OPENBRACKSQ CLOSEBRACKSQ','param',4,'p_param_b','Parser1.py',107),
  ('compound_stmt -> OPENBRACK local_declarations statement_list CLOSEBRACK','compound_stmt',4,'p_compound_stmt','Parser1.py',112),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_a','Parser1.py',117),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_b','Parser1.py',127),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_a','Parser1.py',132),
  ('statement_list -> empty','statement_list',1,'p_statement_list_b','Parser1.py',143),
  ('statement -> expression_stmt','statement',1,'p_statement','Parser1.py',148),
  ('statement -> compound_stmt','statement',1,'p_statement','Parser1.py',149),
  ('statement -> selection_stmt','statement',1,'p_statement','Parser1.py',150),
  ('statement -> iteration_stmt','statement',1,'p_statement','Parser1.py',151),
  ('statement -> return_stmt','statement',1,'p_statement','Parser1.py',152),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','Parser1.py',158),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','Parser1.py',159),
  ('selection_stmt -> IF OPENPAR expression CLOSEPAR statement','selection_stmt',5,'p_selection_stmt_a','Parser1.py',165),
  ('selection_stmt -> IF OPENPAR expression CLOSEPAR statement ELSE statement','selection_stmt',7,'p_selection_stmt_b','Parser1.py',170),
  ('iteration_stmt -> WHILE OPENPAR expression CLOSEPAR statement','iteration_stmt',5,'p_iteration_stmt','Parser1.py',175),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_a','Parser1.py',180),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_b','Parser1.py',185),
  ('expression -> var ASSIGN expression','expression',3,'p_expression_a','Parser1.py',190),
  ('expression -> simple_expression','expression',1,'p_expression_b','Parser1.py',203),
  ('var -> ID','var',1,'p_var_a','Parser1.py',208),
  ('var -> ID OPENBRACKSQ expression CLOSEBRACKSQ','var',4,'p_var_b','Parser1.py',213),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_a','Parser1.py',218),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_b','Parser1.py',223),
  ('relop -> LESSOREQUAL','relop',1,'p_relop','Parser1.py',228),
  ('relop -> LESS','relop',1,'p_relop','Parser1.py',229),
  ('relop -> MORE','relop',1,'p_relop','Parser1.py',230),
  ('relop -> MOREOREQUAL','relop',1,'p_relop','Parser1.py',231),
  ('relop -> EQUALS','relop',1,'p_relop','Parser1.py',232),
  ('relop -> DIFFERENT','relop',1,'p_relop','Parser1.py',233),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_a','Parser1.py',238),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_b','Parser1.py',243),
  ('addop -> PLUS','addop',1,'p_addop','Parser1.py',248),
  ('addop -> MINUS','addop',1,'p_addop','Parser1.py',249),
  ('term -> term mulop factor','term',3,'p_term_a','Parser1.py',254),
  ('term -> factor','term',1,'p_term_b','Parser1.py',259),
  ('mulop -> MULTIPLY','mulop',1,'p_mulop','Parser1.py',264),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser1.py',265),
  ('factor -> OPENPAR expression CLOSEPAR','factor',3,'p_factor_a','Parser1.py',270),
  ('factor -> var','factor',1,'p_factor_b','Parser1.py',275),
  ('factor -> call','factor',1,'p_factor_c','Parser1.py',280),
  ('factor -> NUM','factor',1,'p_factor_d','Parser1.py',285),
  ('call -> ID OPENPAR args CLOSEPAR','call',4,'p_call','Parser1.py',290),
  ('args -> arg_list','args',1,'p_args_a','Parser1.py',298),
  ('args -> empty','args',1,'p_args_b','Parser1.py',303),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list_a','Parser1.py',308),
  ('arg_list -> expression','arg_list',1,'p_arg_list_b','Parser1.py',321),
  ('empty -> <empty>','empty',0,'p_empty','Parser1.py',326),
]
